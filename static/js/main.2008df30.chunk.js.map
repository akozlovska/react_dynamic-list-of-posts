{"version":3,"sources":["utils/fetchClient.ts","PostsContext.tsx","components/PostsList.tsx","components/UserSelector.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","services/postService.ts","components/CommentList/CommentList.tsx","components/PostDetails/PostDetails.tsx","App.tsx","services/userService.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsContext","React","createContext","users","setUsers","selectedUser","setSelectedUser","userPosts","setUserPosts","selectedPost","setSelectedPost","postComments","setPostComments","PostsProvider","children","useState","value","useMemo","Provider","PostsList","useContext","className","map","post","id","title","type","onClick","UserSelector","isSelectActive","setIsSelectActive","cn","onBlur","currSelect","name","role","user","href","onMouseDown","handleSelect","Loader","NewCommentForm","setName","email","setEmail","setBody","isSubmitting","setIsSubmitting","isSubmitError","setIsSubmitError","isNameError","setIsNameError","isEmailError","setIsEmailError","isBodyError","setIsBodyError","onSubmit","e","preventDefault","nameValue","emailValue","bodyValue","trim","validate","newComment","postId","addedComment","currComments","catch","finally","htmlFor","placeholder","onChange","target","TransitionGroup","CSSTransition","classNames","timeout","CommentList","setIsDeleteError","handleCommentDelete","commentId","deletedComment","find","comment","filter","deleteComment","component","PostDetails","isCommentLoading","setIsCommentLoading","isCommentError","setIsCommentError","isWriting","setIsWriting","isDeleteError","useEffect","newComments","length","App","isError","setIsError","isLoading","setIsLoading","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2008df30.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useMemo, useState } from 'react';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { Comment } from './types/Comment';\n\ninterface PostsGlobalContext {\n  users: User[],\n  setUsers: React.Dispatch<React.SetStateAction<User[]>>,\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  userPosts: Post[],\n  setUserPosts: React.Dispatch<React.SetStateAction<Post[]>>,\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  postComments: Comment[],\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n}\n\nexport const PostsContext = React.createContext<PostsGlobalContext>({\n  users: [],\n  setUsers: () => {},\n  selectedUser: null,\n  setSelectedUser: () => {},\n  userPosts: [],\n  setUserPosts: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  postComments: [],\n  setPostComments: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n\n  const value = useMemo(() => {\n    return {\n      users,\n      setUsers,\n      selectedUser,\n      setSelectedUser,\n      userPosts,\n      setUserPosts,\n      selectedPost,\n      setSelectedPost,\n      postComments,\n      setPostComments,\n    };\n  }, [users, selectedUser, userPosts, selectedPost, postComments]);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { PostsContext } from '../PostsContext';\n\nexport const PostsList: React.FC = () => {\n  const { userPosts, selectedPost, setSelectedPost } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost?.id === post.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => setSelectedPost(null)}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => setSelectedPost(post)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { PostsContext } from '../PostsContext';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n    setSelectedPost,\n  } = useContext(PostsContext);\n  const [isSelectActive, setIsSelectActive] = useState(false);\n\n  const handleSelect = (user: User) => {\n    setSelectedUser(user);\n    setIsSelectActive(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isSelectActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onBlur={() => setIsSelectActive(false)}\n          onClick={() => setIsSelectActive(currSelect => !currSelect)}\n        >\n          <span>\n            {selectedUser ? (\n              selectedUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onMouseDown={() => handleSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { PostsContext } from '../PostsContext';\nimport { addComment } from '../services/postService';\n\nexport const NewCommentForm: React.FC = () => {\n  const { selectedPost, setPostComments } = useContext(PostsContext);\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitError, setIsSubmitError] = useState(false);\n\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const validate = ({ nameValue, emailValue, bodyValue }:\n  { nameValue: string, emailValue: string, bodyValue: string }) => {\n    if (!nameValue.trim()) {\n      setIsNameError(true);\n    }\n\n    if (!emailValue.trim()) {\n      setIsEmailError(true);\n    }\n\n    if (!bodyValue.trim()) {\n      setIsBodyError(true);\n    }\n\n    return !!name.trim() && !!email.trim() && !!body.trim();\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setIsSubmitError(false);\n\n    const isValidated = validate({\n      nameValue: name,\n      emailValue: email,\n      bodyValue: body,\n    });\n\n    if (isValidated) {\n      setIsSubmitting(true);\n\n      const newComment = {\n        postId: selectedPost?.id,\n        name,\n        email,\n        body,\n      };\n\n      addComment(newComment)\n        .then(addedComment => {\n          setPostComments(currComments => [...currComments, addedComment]);\n          setBody('');\n        })\n        .catch(() => {\n          setIsSubmitError(true);\n        })\n        .finally(() => setIsSubmitting(false));\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsBodyError(false);\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    setIsNameError(false);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n    setIsEmailError(false);\n  };\n\n  const handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(e.target.value);\n    setIsBodyError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': isNameError,\n            })}\n            value={name}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailError,\n            })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': isBodyError,\n            })}\n            value={body}\n            onChange={handleBodyChange}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isSubmitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n\n      <TransitionGroup>\n        {isSubmitError && (\n          <CSSTransition classNames=\"fade\" timeout={300}>\n            <div className=\"notification is-danger\">\n              Couldn&apos;t post a comment. Please, try again\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setIsSubmitError(false)}\n              />\n            </div>\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </form>\n  );\n};\n","import { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n","import { useContext } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { PostsContext } from '../../PostsContext';\nimport { deleteComment } from '../../services/postService';\n\ntype Props = {\n  setIsDeleteError: (e: boolean) => void;\n};\n\nexport const CommentList: React.FC<Props> = ({ setIsDeleteError }) => {\n  const { postComments, setPostComments } = useContext(PostsContext);\n\n  const handleCommentDelete = (commentId: number) => {\n    setIsDeleteError(false);\n    const deletedComment = postComments\n      .find(comment => comment.id === commentId);\n\n    setPostComments(currComments => currComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setIsDeleteError(true);\n        if (deletedComment) {\n          setPostComments(currComments => [...currComments, deletedComment]);\n        }\n      });\n  };\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      <TransitionGroup component={null}>\n        {postComments.map(comment => (\n          <CSSTransition key={comment.id} classNames=\"fade\" timeout={300}>\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleCommentDelete(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './PostDetails.scss';\nimport { getPostComments } from '../../services/postService';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { CommentList } from '../CommentList';\nimport { PostsContext } from '../../PostsContext';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    postComments,\n    setPostComments,\n  } = useContext(PostsContext);\n\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  const [isCommentError, setIsCommentError] = useState(false);\n  const [isWriting, setIsWriting] = useState(false);\n  const [isDeleteError, setIsDeleteError] = useState(false);\n\n  useEffect(() => {\n    setIsWriting(false);\n    if (selectedPost) {\n      setIsCommentLoading(true);\n      getPostComments(selectedPost.id)\n        .then(newComments => setPostComments([...newComments]))\n        .catch(() => setIsCommentError(true))\n        .finally(() => setIsCommentLoading(false));\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${selectedPost?.id}: ${selectedPost?.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {selectedPost?.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {isCommentLoading ? (\n          <Loader />\n        ) : (\n          <>\n            {isCommentError ? (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            ) : (\n              <>\n                <TransitionGroup component={null}>\n                  {postComments.length ? (\n                    <CSSTransition\n                      classNames=\"comments\"\n                      timeout={300}\n                      key=\"comments\"\n                    >\n                      <CommentList setIsDeleteError={setIsDeleteError} />\n                    </CSSTransition>\n                  ) : (\n                    <CSSTransition\n                      classNames=\"no-comments\"\n                      timeout={300}\n                      key=\"noComments\"\n                    >\n                      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                        No comments yet\n                      </p>\n                    </CSSTransition>\n                  )}\n                </TransitionGroup>\n\n                <TransitionGroup component={null}>\n                  {isDeleteError && (\n                    <CSSTransition classNames=\"fade\" timeout={300}>\n                      <div className=\"notification is-danger\">\n                        Couldn&apos;t delete a comment. Please, try again\n\n                        {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                        <button\n                          type=\"button\"\n                          className=\"delete\"\n                          onClick={() => setIsDeleteError(false)}\n                        />\n                      </div>\n                    </CSSTransition>\n                  )}\n                </TransitionGroup>\n\n                {isWriting ? (\n                  <NewCommentForm />\n                ) : (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setIsWriting(true)}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { getUsers } from './services/userService';\nimport { PostsList } from './components/PostsList';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './services/postService';\nimport { PostsContext } from './PostsContext';\nimport { PostDetails } from './components/PostDetails';\n\nexport const App: React.FC = () => {\n  const {\n    setUsers,\n    userPosts,\n    setUserPosts,\n    selectedUser,\n    selectedPost,\n  } = useContext(PostsContext);\n\n  const [isError, setIsError] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      getUserPosts(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {!!selectedUser && (\n                  <>\n                    {isLoading ? (\n                      <Loader />\n                    ) : (\n                      <>\n                        {isError ? (\n                          <div\n                            className=\"notification is-danger\"\n                            data-cy=\"PostsLoadingError\"\n                          >\n                            Something went wrong!\n                          </div>\n                        ) : (\n                          <>\n                            {userPosts.length === 0 ? (\n                              <div\n                                className=\"notification is-warning\"\n                                data-cy=\"NoPostsYet\"\n                              >\n                                No posts yet\n                              </div>\n                            ) : (\n                              <PostsList />\n                            )}\n                          </>\n                        )}\n                      </>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n\n            {!!selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostsProvider } from './PostsContext';\n\nReactDOM.render(\n  <PostsProvider>\n    <App />\n  </PostsProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}